экспорт асинхронизация функция поискDuckDuckGo(запрос) {
  константа URL-адрес = `https://api.duckduckgo.com/?q=${encodeURIComponent(запрос)}&format=json`;
  константа ре = ждать приносить(URL-адрес);
  если (!ре.ок) бросать новый Ошибка(«Запрос DuckDuckGo не выполнен»);
  возвращаться ре.джон();
}

экспорт асинхронизация функция поискGoogleHTML(запрос, ланг = 'ру') {
  константа URL-адрес = `https://www.google.com/search?q=${encodeURIComponent(запрос)}&hl=${ланг}&num=10&sourceid=chrome`;
  константа ре = ждать приносить(URL-адрес);
  если (!ре.ок) бросать новый Ошибка(«Запрос Google не выполнен»);
  константа текст = ждать ре.текст();
  константа парсер = новый DOMParser();
  константа док = парсер.parseFromString(текст, 'текст/html');
  константа фрагменты = [...док.querySelectorAll('div[data-sncf=1]')].карта(эль => эль.текстСодержание.трим());
  возвращаться фрагменты;
}

экспорт асинхронизация функция fetchWikipediaРезюме(ланг, заголовок) {
  константа URL-адрес = `https://${ланг}. .wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(заголовок)}`;
  константа ре = ждать приносить(URL-адрес);
  если (!ре.ок) бросать новый Ошибка(«Вики-запрос не выполнен»);
  возвращаться ре.джон();
}

экспорт асинхронизация функция handleClaimDetection(претензия) {
  // Очень наивная реализация поиска
  константа ддг = ждать поискDuckDuckGo(претензия);
  константа гугл = ждать поискGoogleHTML(претензия);
  константа вики = ждать fetchWikipediaРезюме('ru', претензия);
  константа доказательства = [];
  если (ддг.АбстрактныйТекст) доказательства.толкать({фрагмент: ддг.АбстрактныйТекст, URL-адрес: ддг.AbstractURL, заголовок: ддг.Заголовок});
  гугл.срез(0, 3).дляКаждого(фрагмент => доказательства.толкать({фрагмент, URL-адрес: 'https://www.google.com', заголовок: «Гугл»}));
  если (вики.экстракт) доказательства.толкать({фрагмент: вики.экстракт, URL-адрес: вики.content_urls.рабочий стол.страница, заголовок: вики.заголовок});
  возвращаться доказательства;
}
